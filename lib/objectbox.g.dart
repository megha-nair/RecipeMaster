// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'User.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(4, 3426639925634170687),
      name: 'Rec',
      lastPropertyId: const IdUid(4, 2406965704516527176),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1818504544180160479),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5113483116503680823),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2204668125892773342),
            name: 'ingredient',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2406965704516527176),
            name: 'instruction',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 3426639925634170687),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        2801486986962258513,
        2491225576538772299,
        5484784418378496964
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4552896181961470431,
        5589750775145292438,
        4603191566756340852,
        3746834204425672887,
        1272018469520548718,
        5739805784685376893,
        7653500879454331842,
        277384582528030695,
        8967710807801552272,
        5521002813983854157,
        5706637847233548921,
        7334976143344353466
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Rec: EntityDefinition<Rec>(
        model: _entities[0],
        toOneRelations: (Rec object) => [],
        toManyRelations: (Rec object) => {},
        getId: (Rec object) => object.id,
        setId: (Rec object, int id) {
          object.id = id;
        },
        objectToFB: (Rec object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final ingredientOffset = fbb.writeString(object.ingredient);
          final instructionOffset = fbb.writeString(object.instruction);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, ingredientOffset);
          fbb.addOffset(3, instructionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Rec(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ingredient: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              instruction: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Rec] entity fields to define ObjectBox queries.
class Rec_ {
  /// see [Rec.id]
  static final id = QueryIntegerProperty<Rec>(_entities[0].properties[0]);

  /// see [Rec.name]
  static final name = QueryStringProperty<Rec>(_entities[0].properties[1]);

  /// see [Rec.ingredient]
  static final ingredient =
      QueryStringProperty<Rec>(_entities[0].properties[2]);

  /// see [Rec.instruction]
  static final instruction =
      QueryStringProperty<Rec>(_entities[0].properties[3]);
}
